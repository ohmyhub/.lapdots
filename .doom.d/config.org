#+title: Eliterate Config
#+author: Kevin Ward
#+email: mail@kevinward.xyz
#+modified: [2022-05-07 Sat 20:07]
#+options: title:nil
#+html: <div align="center"><a href="https://orgmode.org"><img src="https://img.shields.io/badge/Org-literate%20config-%2377aa99?style=flat-square&logo=org&logoColor=white"></a></div>

* Eliterate Config: A hot mess
I am not an organized person. The system I use to organize my life is based
around loosely categorized piles. However, I find literate programming
fascinating and I decided try the literate configuration approach to Emacs.
Thank you to all the individuals who have crafted some amazing literate configs
that I have the benefit of stealing bits and pieces from. People like:
+ [[https://github.com/tecosaur/emacs-config/blob/master/config.org][@tecosaur]]
+ [[https://github.com/elken/.doom.d][@elken]]
+ [[https://github.com/zzamboni/dot-doom][@zzamboni]]
+ [[https://github.com/jeetelongname/dotfiles/blob/master/config/linked/doom/config.org][@jeetelongname]]
and many others I'm sure I've forgotten about. Also, thank you Henrik Lissner
for the time and effort you have spent developing the delightful Doom Emacs. I
use primary use Emacs as a note taking platform for work and D&D campaigns. From
time to time I'll do some actually coding in it but generally speaking I'm
someone who aspires to be a programming /hobbyist/.

What you are about to witness is a perpetual work in progress. It won't be
pretty, but it might be interesting.

** The Basics
*** Step One
+ Make this file run (slightly) faster with lexical binding (see [[https://nullprogram.com/blog/2016/12/22/][this blog post]]
  for more info).
#+begin_src emacs-lisp :tangle yes
;;; config.el -*- lexical-binding: t; -*-
#+end_src

*** Personal Information
+ Who am I?
#+begin_src emacs-lisp :tangle yes
;; user info
(setq user-full-name "Kevin Ward"
      user-mail-address "mail@kevinward.xyz")
#+end_src

+ This is used by GPG and all sorts of other things.

** Quality of Life Improvements
*** Better Defaults
+ Where is my org directory located? This is a little out of place but it needs
  to be set before org loads.
#+begin_src emacs-lisp :tangle yes
;; where the org at?
(setq org-directory "~/Dropbox/Org/")
#+end_src

+ This might as well go here. At the moment I only use roam for daily
  journaling. Someday I might get around to using more of it's functionality.
#+begin_src emacs-lisp :tangle yes
;; where ever I may roam
(setq org-roam-directory "~/Dropbox/Roam/")
(setq org-roam-dailies-directory "daily/")

(setq org-roam-dailies-capture-templates
      '(("d" "default" entry
         "* %?"
         :target (file+head "%<%Y-%m-%d>.org"
                            "#+title: %<%Y-%m-%d>\n"))))
#+end_src

+ I don't really need line numbers.
#+begin_src emacs-lisp :tangle yes
;; I don't care about line numbers
(setq display-line-numbers-type nil)
#+end_src

+ It's the little things that make a house a home. Or a text editor a home.
#+begin_src emacs-lisp :tangle yes
;; better defaults
(setq-default
 delete-by-moving-to-trash t                      ; Delete files to trash
 window-combination-resize t                      ; take new window space from all other windows (not just current)
 x-stretch-cursor t                               ; Stretch cursor to the glyph width
 uniquify-buffer-name-style 'forward)             ; This is my buffer. There are many like it but this one is mine
#+end_src

+ Just mash those buttons to escape.
#+begin_src emacs-lisp :tangle yes
;; mash jk without thinking
(setq evil-escape-unordered-key-sequence t)
#+end_src

+ You can't tell me where to go Emacs. I'll go past the end of the line if I
  want to. Also, when I leave insert mode don't move my cursor. Just leave it
  where it is.
#+begin_src emacs-lisp :tangle yes
(setq evil-move-beyond-eol t)           ; let me go where I want to go!
(setq evil-move-cursor-back nil)        ; don't move my cursor around!
#+end_src

+ If I didn't have undo I don't know what I'd do.
#+begin_src emacs-lisp :tangle yes
;; more better defaults
(setq undo-limit 80000000                         ; Raise undo-limit to 80Mb
      evil-want-fine-undo t                       ; By default while in insert all changes are one big blob. Be more granulated
      auto-save-default t                         ; Save me from myself
      truncate-string-ellipsis "…"               ; Unicode ellispis are nicer than "...", and also save /precious/ space
      scroll-margin 2                             ; It's nice to maintain a little margin
      inhibit-compacting-font-caches t            ; You're not allowed to use the compactor
      recentf-max-saved-items 50)                 ; Saving and exiting has been slow lately. Maybe this will help?
#+end_src

+ What time is it?
#+begin_src emacs-lisp :tangle yes
;; what time is it?
(display-time-mode 1)
(setq display-time-load-average nil)
#+end_src

+ Without ~which-key~ I'd still be stuck in that first scratch buffer. It can get
  a little clogged with the word /evil/ when you use /evil-mode/ so let's filter
  that stuff out.
#+begin_src emacs-lisp :tangle yes
;; which key? this one.
(setq which-key-idle-delay 0.0)
(setq which-key-allow-multiple-replacements t)
(after! which-key
  (pushnew!
   which-key-replacement-alist
   '(("" . "\\`+?evil[-:]?\\(?:a-\\)?\\(.*\\)") . (nil . "◂\\1"))
   '(("\\`g s" . "\\`evilem--?motion-\\(.*\\)") . (nil . "◃\\1"))
   ))
#+end_src

+ A tweak to get ~which-key~ dispatch working.
#+begin_src emacs-lisp :tangle yes
;; tell which-key to behave
(setq which-key-use-C-h-commands t
      prefix-help-command #'which-key-C-h-dispatch)

(defadvice! fix-which-key-dispatcher-a (fn &rest args)
  :around #'which-key-C-h-dispatch
  (let ((keys (this-command-keys-vector)))
    (if (equal (elt keys (1- (length keys))) ?\?)
        (let ((keys (which-key--this-command-keys)))
          (embark-bindings (seq-take keys (1- (length keys)))))
      (apply fn args))))
#+end_src

+ The ~avy~ package is incredibly useful for getting around a buffer. I don't want
  it to limit itself to the current buffer or window only.
#+begin_src emacs-lisp :tangle yes
;; all of them!
(setq avy-all-windows t)
#+end_src

+ When I'm slicing and dicing windows I want them to default to splitting to the
  right or to the bottom of the frame. Also, ask me what buffer to use in the
  newly created window.
#+begin_src emacs-lisp :tangle yes
;; do the splits
(setq evil-vsplit-window-right t
      evil-split-window-below t)

(defadvice! prompt-for-buffer (&rest _)
  :after '(evil-window-split evil-window-vsplit)
  (consult-buffer))
#+end_src

+ Promptly prompt me per our previous promise
#+begin_src emacs-lisp :tangle yes
;; I like prompt prompts
(setq company-minimum-prefix-length 1)
(setq company-idle-delay 0.0)
(setq company-tooltip-align-annotations t)
(setq company-selection-wrap-around t)
#+end_src

+ Wrap your words and your willy.
#+begin_src emacs-lisp :tangle yes
(+global-word-wrap-mode +1)
#+end_src

+ Let's load my custom keybindings that I put in separate file for reasons I no
  longer remember. Oh, and my ~abbrev~ definitions that automagically fix many
  common spelling mistakes.
#+begin_src emacs-lisp :tangle yes
;; keybinds
(load! "bindings")

;; abbrev mode definitions
(load! "abbrev")
#+end_src

*** Helpful Functions
+ A helpful individual over on [[https://www.reddit.com/r/orgmode/comments/f63n53/is_there_an_easy_way_to_insert_an_image_link/fi46wpr/][reddit]] threw together this lovely function that
  helps insert image links with a caption in ~org-mode~.
#+begin_src emacs-lisp :tangle yes
;; My default image directory. It's literally the name of the variable.
(setq my-default-image-directory "~/Dropbox/Org/linked-images/")

;; Function to aid in inserting org-mode image links.
(defun insert-image-org-link (img caption)
  "Insert an org image link, choosing the file with completion
and starting from `my-default-image-directory'. This prompts for
an optional caption (leave it empty for no caption)."
  (interactive
   (list (read-file-name
          "Image: " my-default-image-directory nil t nil
          (lambda (name)
            (or (directory-name-p name)
                (member (file-name-extension name)
                        image-file-name-extensions))))
         (read-string "Caption: ")))
  (insert
   (if (string-empty-p caption)
       (format "[[%s]]" img)
     (format "#+caption: %s\n[[%s]]" caption img))))
#+end_src

+ I want to be able to insert an active timestamp with relative ease.
#+begin_src emacs-lisp :tangle yes
(defun kev/get-timestamp ()
  "Calls org-time-stamp with 2 prefix arguments"
  :repeat nil
  (interactive)
  (org-time-stamp '(16) t))
#+end_src

+ Open the file that I'm currently writing this in.
#+begin_src emacs-lisp :tangle yes
(defun org-open-config-file ()
  (interactive)
  (find-file "~/.doom.d/config.org"))
#+end_src

+ A helper function that I stole from jeet to reload this file after it's
  tangled.
#+begin_src emacs-lisp :tangle yes
;; reload config file
(defun kev/reload ()
  "A simple command to make reloading my config easier."
  (interactive)
  (load! "config" doom-private-dir)
  (message "Reloaded!"))
#+end_src

#+begin_src emacs-lisp :tangle yes
(map! :leader
      "h r c" #'kev/reload)
#+end_src

+ Evaluate configuration and reload fonts.
#+begin_src emacs-lisp :tangle yes
;; a function to see my font tweaks quickly
(defun evig ()
  "Evaluate the current buffer and reload fonts."
  (interactive)
  (eval-buffer)
  (doom/reload-font))
#+end_src

+ I have an org document for each project I'm working on. When I take meeting
  notes I'll enter the meeting as a new heading. This little guy, in combination
  with a keybind, spits out the date formatted the way I like it.
#+begin_src emacs-lisp :tangle yes
;; what day is it?
(defun today ()
  "Insert string for today's date nicely formatted as yyyy-MM-dd, Day of the Week"
  (interactive)                 ; permit invocation in minibuffer
  (insert (format-time-string "%Y-%m-%d, %A")))
#+end_src

+ A handy function I stole from @tecosaur to create a new org-mode buffer.
#+begin_src emacs-lisp :tangle yes
;; create new empty org-mode buffer
(evil-define-command evil-buffer-org-new (count file)
  "Creates a new ORG buffer replacing the current window, optionally
   editing a certain FILE"
  :repeat nil
  (interactive "P<f>")
  (if file
      (evil-edit file)
    (let ((buffer (generate-new-buffer "*new org*")))
      (set-window-buffer nil buffer)
      (with-current-buffer buffer
        (org-mode)))))
#+end_src

+ I want to tangle this configuration file when I save it.
#+begin_src emacs-lisp :tangle yes
;; tangle literate config on save
(defun org-babel-tangle-config ()
  (when (string-equal (buffer-file-name)
                      (expand-file-name "~/.doom.d/config.org"))
    (let ((org-config-babel-evaluate nil))
      (org-babel-tangle))))

  (add-hook 'org-mode-hook
        (lambda ()
          (add-hook 'after-save-hook #'org-babel-tangle-config)))
#+end_src

+ A little helper function that let's you extract the url from an org-mode link
  and copy it to the kill ring.
#+begin_src emacs-lisp :tangle yes
;; a useful function I took from (https://github.com/SqrtMinusOne/dotfiles/blob/master/.emacs.d/init.el)
(defun kev/org-link-copy (&optional arg)
  "Extract URL from org-mode link and add it to kill ring."
  (interactive "P")
  (let* ((link (org-element-lineage (org-element-context) '(link) t))
         (type (org-element-property :type link))
         (url (org-element-property :path link))
         (url (concat type ":" url)))
    (kill-new url)
    (message (concat "Copied URL: " url))))
#+end_src

** Lookin' Good
*** Theme
+ I'm using a WIP progress doom theme I've tentatively named taco-supreme. It
  started off being inspired by the 1990s Taco Bell color palette.
#+begin_src emacs-lisp :tangle yes
;; Live Mas
(setq doom-theme 'doom-taco-supreme)
#+end_src

*** Fonts
+ I enjoy a nice looking font. I'm also a fan of eye candy. So things like
  ligatures and code glyph appeal to me. I customized and built my own version
  of Iosevka recently so that's what I'm using at the moment.

#+begin_src emacs-lisp :tangle yes
;; choose your fonts!
(setq doom-font (font-spec :family "Bespoke Iosevka Mono" :size 24 :weight 'regular)
      doom-variable-pitch-font (font-spec :family "Overpass Nerd Font" :size 22 :weight 'medium)
      doom-unicode-font (font-spec :family "Noto Color Emoji")
      doom-serif-font (font-spec :family "BlexMono Nerd Font" :weight 'light))
(after! doom-themes
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t))
(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic)
  '(org-verse :slant italic))

(setq org-fontify-quote-and-verse-blocks t)
#+end_src

+ Mixing monospace and variable pitched fonts in org-mode gives you a visually
  impressive workspace. Once again I am swiping a bit of config from the
  impressive @tecosaur.
#+begin_src emacs-lisp :tangle yes
;; my pitches getting all mixed up
(defvar mixed-pitch-modes '(org-mode LaTeX-mode markdown-mode gfm-mode Info-mode)
  "Modes that `mixed-pitch-mode' should be enabled in, but only after UI initialisation.")
(defun init-mixed-pitch-h ()
  "Hook `mixed-pitch-mode' into each mode in `mixed-pitch-modes'.
Also immediately enables `mixed-pitch-modes' if currently in one of the modes."
  (when (memq major-mode mixed-pitch-modes)
    (mixed-pitch-mode 1))
  (dolist (hook mixed-pitch-modes)
    (add-hook (intern (concat (symbol-name hook) "-hook")) #'mixed-pitch-mode)))
(add-hook 'doom-init-ui-hook #'init-mixed-pitch-h)
#+end_src

*** Doom Dashboard
+ The first thing you see when you fire up Doom Emacs is the Doom Dashboard. I'm
  using this glorious rainbow unicorn that's from some github error page.
#+begin_src emacs-lisp :tangle yes
;; fancy splash screen image
(setq fancy-splash-image "~/Pictures/unbridled-unicorn.png")
#+end_src

+ I wanted a more minimal dashboard so I removed the text menu
#+begin_src emacs-lisp :tangle yes
;; simplify the startup screen
(remove-hook '+doom-dashboard-functions #'doom-dashboard-widget-shortmenu)
#+end_src

*** Modeline
+ When I see text in red I assume something has gone wrong. The default in Doom
  is to show a the filename in red when there are unsaved changes. Let's go with
  a slightly less alarming orange.
#+begin_src emacs-lisp :tangle yes
;; red is too aggressive, so let's make it orange
(custom-set-faces!
  '(doom-modeline-buffer-modified :foreground "orange"))
#+end_src

+ This specifies exactly what items I want shown in the modeline. It also adds a
  little padding on the right edge and increases it's overall height. I like a
  thicc modeline.
#+begin_src emacs-lisp :tangle yes
;; add padding and height to the modeline
(after! doom-modeline
  (doom-modeline-def-modeline 'main
    '(bar workspace-name window-number modals matches follow buffer-info remote-host buffer-position word-count parrot selection-info)
    '(objed-state misc-info persp-name battery grip irc mu4e gnus github debug repl lsp minor-modes input-method indent-info buffer-encoding major-mode process vcs checker "  ")))

(setq doom-modeline-height 40)
#+end_src

+ A custom modeline for pdf files stolen from @jeet who stole it from @teco.
#+begin_src emacs-lisp :tangle yes
;; tecos pdf modeline
(after! (pdf-tools doom-modeline)
  (doom-modeline-def-segment pdf-icon
    (concat
     (doom-modeline-spc)
     (doom-modeline-icon 'octicon "file-pdf" nil nil
                         :face (if (doom-modeline--active)
                                   'all-the-icons-red
                                 'mode-line-inactive)
                         :v-adjust 0.02)))

  (doom-modeline-def-segment buffer-name
    (concat
     (doom-modeline-spc)
     (doom-modeline--buffer-name)))

  (defun doom-modeline-update-pdf-pages ()
    "Update PDF pages."
    (setq doom-modeline--pdf-pages
          (concat " P"
                  (number-to-string (eval `(pdf-view-current-page)))
                  (propertize (concat "/" (number-to-string (pdf-cache-number-of-pages))) 'face 'doom-modeline-buffer-minor-mode))))

  (doom-modeline-def-segment pdf-pages
    "Display PDF pages."
    (if (doom-modeline--active) doom-modeline--pdf-pages
      (propertize doom-modeline--pdf-pages 'face 'mode-line-inactive)))

  (doom-modeline-def-modeline 'pdf
    '(bar window-number matches pdf-pages pdf-icon buffer-name)
    '(misc-info major-mode process vcs))

  (defun doom-set-pdf-modeline-h ()
    "sets the pdf modeline"
    (doom-modeline-set-modeline 'pdf))

  (add-hook! 'pdf-view-mode-hook 'doom-set-pdf-modeline-h))
#+end_src

*** Package/Module UI
**** Vertico
+ I use ~vertico~ and the Doom Emacs affiliated modules/packages as my completion
  engine. I prefer using a childframe instead of a minibuffer. I used
  vertico-posframe before it was added to doom but it's been integrated as a
  module flag at this point.
#+begin_src emacs-lisp :tangle yes
;; vertico but posframey
(setq vertico-posframe-border-width 2)

(setq vertico-posframe-parameters
      '((left-fringe . 8)
        (right-fringe . 8)))
#+end_src

**** Avy
+ I barely use the avy package which is a shame because it's excellent. I do use
  it to navigate between multiple windows. This was a hot tip from the mighty
  meatball himself to make avy window numbers stand out more.
#+begin_src emacs-lisp :tangle yes
;; Make the ace window number easier to see
(custom-set-faces!
  '(aw-leading-char-face
    :foreground "white" :background "#f7768e"
    :weight bold :height 1.0 :box (:line-width 10 :color "#f7768e")))
#+end_src

**** Evil States
+ Texas. I'm just kidding. I like my cursor to change shape and color to make
  blindingly obvious to my oblivious brain what modal state I'm in.
#+begin_src emacs-lisp :tangle yes
;; cursors do colors
(setq evil-normal-state-cursor '("dodger blue" box))
(setq evil-visual-state-cursor '("orange" hollow))
(setq evil-insert-state-cursor '("yellow" bar))
#+end_src

**** Centaur Tabs
+ I like tab buffers but I wanted to add my own little design flair to the tab
  icons. This changes the icons used for closing a tab and for showing when a
  buffer has unsaved changes.
#+begin_src emacs-lisp :tangle yes
;; tweak those tabs
(setq centaur-tabs-close-button ""
      centaur-tabs-modified-marker ""
      centaur-tabs-set-bar 'over)
#+end_src

**** Rainbow Mode
+ Hexcodes are colorized with the rainbow-mode package. Rainbow-mode is hooked
  into org-mode and all programming modes.
#+begin_src emacs-lisp :tangle yes
;; I can see colors!
(add-hook! org-mode 'rainbow-mode)
(add-hook! prog-mode 'rainbow-mode)
#+end_src

*** Other
+ fringe-mode will add a little padding at the fringes of your frames. I'm a big
  fan of [[https://www.youtube.com/watch?v=BIG_GVE-KiE][fringes]].
#+begin_src emacs-lisp :tangle yes
;; add fringes
(set-fringe-mode 8)
#+end_src

+ This does something. What it does I can't say but I bet it's neat. I may look
  into this later but for I like to leave things a little mysterious. Even to
  myself.
#+begin_src emacs-lisp :tangle yes
;; count your pixels
(setq display-pixels-per-inch 109.0)
#+end_src

** Org Mode = Best Mode
*** Small but important
+ Give my headings their space!
#+begin_src emacs-lisp :tangle yes
;; stay out of my personal space
(setq org-cycle-separator-lines -1)
#+end_src

+ When I open a file link in org-mode what will the file open in by default?
#+begin_src emacs-lisp :tangle yes
;; set defaults for opening files
(setq org-file-apps
      '((remote . emacs)
        (auto-mode . emacs)
        (directory . emacs)
        ("\\.mm\\'" . default)
        ("\\.x?html?\\'" . default)
        ("\\.pdf\\'" . default)
        ("\\.epub\\'" . "foliate %s")))
#+end_src

+ Ideally I'll keep all my TODO items in a master file. When I open my
  org-agenda I don't want it to look anywhere else except that file.
#+begin_src emacs-lisp :tangle yes
;; Not all the agendas
(setq org-agenda-files '("~/Dropbox/Org/manage-self.org"))
#+end_src

+ Thank you @tecosaur for the wonderful [[https://github.com/tecosaur/org-pandoc-import][org-pandoc-import]] package. I want all
  the text in org-mode please.
#+begin_src emacs-lisp :tangle yes
;; my org document wants to have a Word with you
(use-package! org-pandoc-import :after org)
#+end_src

+ I like nesting headlines and I want LaTeX to respect that when I use it to
  pummel an org document into the shape of a pdf.
#+begin_src emacs-lisp :tangle yes
;; go deep!
(setq org-export-headline-levels 5)
#+end_src

+ This is something I took me a long time to find. I wanted to automatically insert a timestamp into an org-mode document every time I modified and saved it. This hook will insert a date and time under the the document header I call ~#+modified~.
#+begin_src emacs-lisp :tangle yes
;; last modified hook
(after! org
  (setq time-stamp-active t
    time-stamp-start "#\\+modified:[ \t]*"
    time-stamp-end "$"
    time-stamp-format "\[%Y-%02m-%02d %3a %02H:%02M\]")
(add-hook 'before-save-hook 'time-stamp))
#+end_src

*** Make It Pretty!
+ I use org-mode to create task lists. Having keywords I can assign to a heading
  helps with that.
#+begin_src emacs-lisp :tangle yes
;; this is a priorities
(after! org
  (setq org-priority-faces
        '((65 :foreground "red" :weight bold)
          (66 :foreground "orange" :weight bold)
          (67 :foreground "yellow" :weight bold)
          (68 :foreground "blue" :weight normal))
        org-fancy-priorities-list '("HIGH" "MID" "LOW" "OPTIONAL")
        org-todo-keywords '((sequence "TODO(t)" "INPROGRESS(i)" "WAIT(w)" "|" "DONE(d)" "CANCELLED(c)" "REMINDER(r)"))
        org-todo-keyword-faces
        '(("TODO" :foreground "#34f455" :weight bold :underline t)
          ("INPROGRESS" :foreground "#f4f434" :weight normal :underline t)
          ("WAIT" :foreground "#83cec8" :weight normal :underline nil)
          ("DONE" :foreground "#a98bf4" :weight normal :strike-through t)
          ("CANCELLED" :foreground "#818178" :weight normal :strike-through t)
          ("REMINDER" :foreground "#8DDFF3" :weight normal :underline nil))))
#+end_src

+ I find these face attributes to be the most pleasing for my org headings.
#+begin_src emacs-lisp :tangle yes
;; you got custom on my face
(custom-set-faces!
  '(outline-1 :weight extra-bold :height 1.4)
  '(outline-2 :weight bold :height 1.2)
  '(outline-3 :weight bold :height 1.15)
  '(outline-4 :weight semi-bold :height 1.10)
  '(outline-5 :weight semi-bold :height 1.08)
  '(outline-6 :weight semi-bold :height 1.05)
  '(outline-8 :weight semi-bold)
  '(outline-9 :weight semi-bold))

(custom-set-faces!
  '(org-document-title :height 1.5))
#+end_src

+ I did say /make it pretty/ did I not?
#+begin_src emacs-lisp :tangle yes
;; so pretty
(add-hook 'org-mode-hook #'+org-pretty-mode)
#+end_src

+ Who wants normal old bullets for their headings anyway?
#+begin_src emacs-lisp :tangle yes
;; you're a superstar!
(after! org-superstar
  (setq org-superstar-headline-bullets-list '("◉" "○" "✸" "•" "◆" "✜" "✤" "▹")
        org-superstar-prettify-item-bullets t ))
#+end_src

+ A couple of things are going on in this next bit. I think the downward facing
  triangle looks nicer than the ellipses for folded org trees. Also, I don't
  need to see those stars before my pretty bullets. Also the second using
  colorful icons helps me to prioritize tasks and it is nice to make those
  priorities pop visually.
#+begin_src emacs-lisp :tangle yes
;; more fancy please
(setq org-ellipsis " ▾ "
      org-hide-leading-stars t
      org-priority-highest ?A
      org-priority-lowest ?E
      org-priority-faces
      '((?A . 'all-the-icons-red)
        (?B . 'all-the-icons-orange)
        (?C . 'all-the-icons-yellow)
        (?D . 'all-the-icons-green)
        (?E . 'all-the-icons-blue)))
#+end_src

+ I replace a bunch of common org-mode specific words with fancy a glyph or
  icons. I ripped straight out of @tecosaur config with some minor tweaks and
  additions of my own.
#+begin_src emacs-lisp :tangle yes
;; why use words when have pictures?
(after! org
  (appendq! +ligatures-extra-symbols
            `(:checkbox      "☐"
              :pending       "■"
              :checkedbox    "☑"
              :list_property "∷"
              :em_dash       "—"
              :ellipses      "…"
              :arrow_right   "→"
              :arrow_left    "←"
              :title         ""
              :subtitle      "ʈ"
              :author        ""
              :date          ""
              :property      ""
              :options       "⌥"
              :startup       "⏻"
              :macro         "μ"
              :html_head     ""
              :html          ""
              :latex_class   ""
              :latex_header  ""
              :beamer_header "β"
              :latex         ""
              :attr_latex    ""
              :attr_html     ""
              :attr_org      "🦄"
              :begin_quote   "❝"
              :end_quote     "❞"
              :caption       "☰"
              :header        "›"
              :results       ""
              :begin_export  ""
              :end_export    ""
              :properties    ""
              :drawer        "▬"
              :end           "∎"
              :log           "⬓"
              :email         ""
              :logbook       ""
              :modified      ""))
  (set-ligatures! 'org-mode
    :merge t
    :checkbox      "[ ]"
    :pending       "[-]"
    :checkedbox    "[X]"
    :list_property "::"
    :em_dash       "---"
    :ellipsis      "..."
    :arrow_right   "->"
    :arrow_left    "<-"
    :title         "#+title:"
    :subtitle      "#+subtitle:"
    :author        "#+author:"
    :date          "#+date:"
    :property      "#+property:"
    :options       "#+options:"
    :startup       "#+startup:"
    :macro         "#+macro:"
    :html_head     "#+html_head:"
    :html          "#+html:"
    :latex_class   "#+latex_class:"
    :latex_header  "#+latex_header:"
    :beamer_header "#+beamer_header:"
    :latex         "#+latex:"
    :attr_latex    "#+attr_latex:"
    :attr_html     "#+attr_html:"
    :attr_org      "#+attr_org:"
    :begin_quote   "#+begin_quote"
    :end_quote     "#+end_quote"
    :caption       "#+caption:"
    :header        "#+header:"
    :begin_export  "#+begin_export"
    :end_export    "#+end_export"
    :results       "#+RESULTS:"
    :property      ":properties:"
    :end           ":end:"
    :drawer        ":drawer:"
    :log           ":log:"
    :email         "#+email:"
    :logbook       ":logbook:"
    :modified      "#+modified:")
  (plist-put +ligatures-extra-symbols :name "⁍"))
#+end_src

+ Oh yea, I still need to hook fancy priorities into org-mode.
#+begin_src emacs-lisp :tangle yes
;; More. Fancy.
(add-hook! org-mode 'org-fancy-priorities-mode)
#+end_src

+ Get out of here stars! Never talk to me or my Unicode bullets again.
#+begin_src emacs-lisp :tangle yes
;; get out of my face stars
(setq org-hide-leading-stars t)
#+end_src

+ Defines a minor mode to allow special forms such as /italics/, *bold*, _underline_
  and =literal= to be editable when the cursor is over them, otherwise display the
  proper value.
#+begin_src emacs-lisp :tangle yes
;; you will stay hidden until I summon you
(use-package! org-appear
  :after org
  :hook (org-mode . org-appear-mode)
  :config
  (setq org-appear-autoemphasis t
        org-appear-autosubmarkers t))
#+end_src

+ A little bit of configuration for the company-org-block package. It's just
  another method of making it easier to insert org-src blocks easily.
#+begin_src emacs-lisp :tangle yes
(use-package! company-org-block
  :after org
  :config
  (setq company-org-block-edit-style 'auto))

(after! org
  (set-company-backend! 'org-mode-hook '(company-org-block company-capf)))
#+end_src

** The Experiments
*** Rust
+ I like to pretend I'm going to do something with rust one day.
#+begin_src emacs-lisp :tangle yes
;; rust language config
(after! rustic
  (setq rustic-lsp-server 'rls))
#+end_src

*** Elfeed
+ A little rss to feed my appetite for configuring something more than I use it.
#+begin_src emacs-lisp :tangle yes
;; Feed me
(after! elfeed
  (setq elfeed-search-filter "@2-month-ago +unread"))

(setq elfeed-dashboard-file "~/Dropbox/Org/elfeed-dashboard.org")
#+end_src

*** org-media-note
+ Control mpv from within emacs and integrate your notes into the video by way
  of timestamps and other goodies.
#+begin_src emacs-lisp :tangle yes
;; config for org-media-note
(use-package! org-media-note
  :hook (org-mode . org-media-note-mode)
  :bind (
         ("C-M-s-v" . org-media-note-hydra/body))  ;; Main entrance
  :config
  (setq org-media-note-screenshot-image-dir "~/Pictures/"))  ;; Folder to save screenshot
#+end_src

*** org-volume
+ An interesting tool for obtaining data on books and integrate that into an org-mode workflow.
#+begin_src emacs-lisp :tangle yes
;; playing with org-volume
(setq org-volume-image-download-method nil)

;; save images to default org image directory
(setq org-download-image-dir "~/Dropbox/Org/linked-images/")
#+end_src

*** Webjump
+ An oldie but a goodie. This is a quick way to open my most often visited
  websites. The package plus a keybinding makes it easy.
#+begin_src emacs-lisp :tangle yes
;; webjump list
(setq webjump-sites
      '(("Discord" . "https://canary.discord.com/channels/@me")
      ("Reddit - All" . "https://www.reddit.com/r/all/")
      ("Youtube" . "https://www.youtube.com/")
      ("Github" . "https://github.com/")
      ("Gmail" . "https://gmail.google.com/mail/")
      ("Reddit - Linux" . "https://www.reddit.com/r/linux/")))
#+end_src

*** Atomic Chrome
+ This is an interesting and fun emacs web-browser integration. This package in
  combination with a Firefox extension allows me to use emacs to edit any text I
  write in Firefox. I had to do some back end configuration to get this to work
  with Wayland and the sway window manager. Now when I invoke the web extension
  in Firefox a small transparent emacs frame appears that I can write in and it
  updates in the web browser in real time.
#+begin_src emacs-lisp :tangle yes
;; emacs in the browser
(atomic-chrome-start-server)
(setq atomic-chrome-default-major-mode 'org-mode
      atomic-chrome-buffer-open-style 'frame)

;; Set transparency of emacs
(defun transparency (value)
  "Sets the transparency of the frame window. 0=transparent/100=opaque"
  (interactive "nTransparency Value 0 - 100 opaque:")
  (set-frame-parameter (selected-frame) 'alpha value))
#+end_src
